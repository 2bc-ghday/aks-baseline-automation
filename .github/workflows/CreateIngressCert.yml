# Creates Ingress Certificate and Pushes to Key Vault

name: Create and Push Ingress Certs to AKV

on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'A GitHub Environment to pull action secrets from'
        required: true
        default: 'cset'
        type: string
      DOMAIN:
        description: 'The domain name to use for the certs'
        required: true
        default: 'contoso.com'
        type: string
      AKVNAME:
        description: 'The Name of the AKV resource'
        required: true
        type: string

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

env:
  event_sha: +refs/pull/${{ github.event.issue.number }}/merge

permissions:
      id-token: write
      contents: read

jobs:
  App_Init:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    env:
      DOMAIN: "${{ inputs.DOMAIN}}"
      AKVNAME: "${{ inputs.AKVNAME}}"

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - name: Job parameter inspection
        run: |
          echo "DOMAIN is ${{ inputs.DOMAIN }}"
          echo "AKV name is ${{ inputs.AKVNAME }}"

      - name: Azure Login
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Certs 
        run: |
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -out appgw.crt -keyout appgw.key -subj "/CN=bicycle.${{ inputs.DOMAIN }}/O=Contoso Bicycle" -addext "subjectAltName = DNS:bicycle.${{ inputs.DOMAIN }}" -addext "keyUsage = digitalSignature" -addext "extendedKeyUsage = serverAuth"
          openssl pkcs12 -export -out appgw.pfx -in appgw.crt -inkey appgw.key -passout pass:
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -out traefik-ingress-internal-aks-ingress-tls.crt -keyout traefik-ingress-internal-aks-ingress-tls.key -subj "/CN=*.aks-ingress.${{ inputs.DOMAIN }}/O=Contoso AKS Ingress"
          echo "AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64_AKS_BASELINE=$(cat traefik-ingress-internal-aks-ingress-tls.crt | base64 | tr -d '\n')" >> $GITHUB_ENV
          echo "AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64_AKS_BASELINE: ${{ env.AKS_INGRESS_CONTROLLER_CERTIFICATE_BASE64_AKS_BASELINE }}"
          echo "TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT=$(az role assignment create --role a4417e6f-fecd-4de8-b567-7b0420556985 --assignee-principal-type user --assignee-object-id $(az ad signed-in-user show --query 'id' -o tsv) --scope $(az keyvault show --name  ${{ inputs.AKVNAME }} --query 'id' -o tsv) --query 'id' -o tsv)"  >> $GITHUB_ENV
          echo "TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT: ${{ env.TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT }}"
          CURRENT_IP_ADDRESS=$(curl -s -4 https://ifconfig.io)
          echo CURRENT_IP_ADDRESS: $CURRENT_IP_ADDRESS
          az keyvault network-rule add -n ${{ inputs.AKVNAME }} --ip-address ${CURRENT_IP_ADDRESS}
          cat traefik-ingress-internal-aks-ingress-tls.crt traefik-ingress-internal-aks-ingress-tls.key > traefik-ingress-internal-aks-ingress-tls.pem
          az keyvault certificate import -f traefik-ingress-internal-aks-ingress-tls.pem -n traefik-ingress-internal-aks-ingress-tls --vault-name ${{ inputs.AKVNAME }}
          az keyvault network-rule remove -n ${{ inputs.AKVNAME }} --ip-address "${CURRENT_IP_ADDRESS}/32"
          az role assignment delete --ids $TEMP_ROLEASSIGNMENT_TO_UPLOAD_CERT

