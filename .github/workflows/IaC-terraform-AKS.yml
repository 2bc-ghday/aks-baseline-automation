name: 'IaC Deploy Terraform based AKS Cluster'

on: 
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'A GitHub Environment to pull action secrets from'
        required: true
        type: environment
      REGION:
        description: 'The Azure region to deploy to'
        type: string
        required: true
        default: eastus
      TF_BACKEND_STORAGE_ACCOUNT:
        description: 'The Azure Storage Account where TF backend will be stored (must be unique). Skip this param if you want to use a TF local backend'
        type: string
        required: false
        default: ""
      DEPLOY:
        description: 'Execute Terraform apply'
        type: boolean
        required: false
        default: true
      DESTROY:
        description: 'Execute Terraform destroy'
        type: boolean
        required: false
        default: false

env:
  AZURE_CREDENTIALS: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}", "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}", "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}", "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
  event_sha: +refs/pull/${{ github.event.issue.number }}/merge
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_PARTNER_ID: "451dc593-a3a3-4d41-91e7-3aadf93e1a78"
  ENVIRONMENT: "${{ github.repository }}/${{ github.event.inputs.ENVIRONMENT }}"
  TF_BACKEND_RSG: "rg-enterprise-tf-dependencies"
  TF_VERSION: "1.3.1"
  AZ_CLI_VERSION: "2.39.0" # Please do not upgrade until https://github.com/Azure/azure-cli/issues/24029 is solved
  
permissions:
  id-token: write
  contents: read
  
jobs:
  deploy-standalone:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENVIRONMENT }}
    outputs:
      prefix: ${{ steps.test.outputs.PREFIX }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: "Parameter Check"
        run: |
          echo "Environment : ${{ github.event.inputs.ENVIRONMENT }}"
          echo "Environment tag : ${{ env.ENVIRONMENT }}"
          echo "REGION : ${{ github.event.inputs.REGION }}"
          echo "TF_BACKEND_STORAGE_ACCOUNT : ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }}"
          echo "DEPLOY : ${{ github.event.inputs.DEPLOY }}"
          echo "DESTROY : ${{ github.event.inputs.DESTROY }}"

        # OIDC auth is not supported until TF AzureRM 3.7.0 onwards
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Create Resource Group and Storage Account for TF State
        if: ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT != '' && github.event.inputs.DEPLOY == 'true' }}
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -l ${{ github.event.inputs.REGION }} -n ${{ env.TF_BACKEND_RSG }}
            az storage account create -n ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }} -g ${{ env.TF_BACKEND_RSG }} -l ${{ github.event.inputs.REGION }} --sku Standard_LRS --https-only $true --min-tls-version TLS1_2
            az storage container create -n tfstate --account-name ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }}

      # Not needed for azure/CLI@v1, using this instead of run due to https://github.com/Azure/azure-cli/issues/24029 with AzCLI 2.40.0
      # Output: https://stackoverflow.com/questions/65170927/terraform-output-value-failed-formatted-by-jq-in-github-actions
      # - uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: ${{ env.TF_VERSION }}
      #     terraform_wrapper: false

      - name: Deploy Plan Standalone
        if: ${{ github.event.inputs.DEPLOY == 'true' }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            cd IaC/terraform
            ls -lta
            
            wget -nc https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
            unzip -o terraform_${{ env.TF_VERSION }}_linux_amd64.zip
            rm terraform_${{ env.TF_VERSION }}_linux_amd64.zip

            git clone https://github.com/Azure/caf-terraform-landingzones.git landingzone
            
            parameter_files=$(find configuration -not -path "*launchpad*" | grep .tfvars | sed 's/.*/-var-file &/' | xargs)
            echo "parameter_files: ${parameter_files}"
            
            if [ -n ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }} ]
            then
              ./terraform init -upgrade -backend-config=storage_account_name="${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }}" -backend-config=container_name="tfstate" -backend-config=key="aks-baseline.tfstate" -backend-config=resource_group_name="${{ env.TF_BACKEND_RSG }}"
            else
              ./terraform init -upgrade
            fi
            eval ./terraform plan ${parameter_files} -var 'tags={"repo_environment":"$ENVIRONMENT"}' -out tfdeployplan

      - name: Deploy Standalone
        if: ${{ github.event.inputs.DEPLOY == 'true' }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            cd IaC/terraform
            ls -lta
            
            eval ./terraform apply -parallelism=30 -auto-approve tfdeployplan

      - name: Destroy Plan Standalone
        if: ${{ github.event.inputs.DESTROY == 'true' }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            cd IaC/terraform
            ls -lta

            wget -nc https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
            unzip -o terraform_${{ env.TF_VERSION }}_linux_amd64.zip
            rm terraform_${{ env.TF_VERSION }}_linux_amd64.zip

            parameter_files=$(find configuration -not -path "*launchpad*" | grep .tfvars | sed 's/.*/-var-file &/' | xargs)
            echo "parameter_files: ${parameter_files}"

            if [ -n ${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }} ]
            then
              ./terraform init -upgrade -backend-config=storage_account_name="${{ github.event.inputs.TF_BACKEND_STORAGE_ACCOUNT }}" -backend-config=container_name="tfstate" -backend-config=key="aks-baseline.tfstate" -backend-config=resource_group_name="${{ env.TF_BACKEND_RSG }}"
            else
              ./terraform init -upgrade
            fi
            eval ./terraform plan ${parameter_files} -var 'tags={"repo_environment":"$ENVIRONMENT"}' -destroy -out tfdestroyplan

      - name: Diagnostics purge
        if: ${{ github.event.inputs.DESTROY == 'true' }}
        run: |
            echo RepoEnvironment $ENVIRONMENT
            
            resource_groups=`az group list --tag repo_environment='$ENVIRONMENT' --query '[].name' -o json | jq -r '.[]'`
            resource_groups_array=($resource_groups)
            resource_ids=()
            for i in "${resource_groups_array[@]}"; do resource_ids+=`az resource list -g $i -o json --query '[].id' | jq -r '.[]'`; done
            resource_ids_array=($resource_ids)
            for i in "$resource_ids_array[@]"; do echo "Purging diagnostic-settings in: $i" && $(az monitor diagnostic-settings delete --resource $i --yes); done
            
            for i in `az keyvault list-deleted --query "[?properties.tags.repo_environment=='$ENVIRONMENT'].name" -o tsv`; do az keyvault purge --name $i; done

      - name: Destroy Standalone
        if: ${{ github.event.inputs.DESTROY == 'true' }}
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.AZ_CLI_VERSION }}
          inlineScript: |
            cd IaC/terraform
            ls -lta

            eval ./terraform apply -parallelism=30 -auto-approve tfdestroyplan

      - name: Complete purge
        if: ${{ github.event.inputs.DESTROY == 'true' }}
        run: |
            for i in `az keyvault list-deleted --query "[?properties.tags.repo_environment=='$ENVIRONMENT'].name" -o tsv`; do az keyvault purge --name $i; done